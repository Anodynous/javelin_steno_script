//---------------------------------------------------------------------------
// Default Kyria rev3 script.
//---------------------------------------------------------------------------

// Steno
//
// ,-------------------------------------------.                              ,-------------------------------------------.
// |        |  S1  |   T  |   P  |   H  |  *1  |                              |  *2  |   F  |   P  |   L  |   T  |    D   |
// |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
// |        |  S2  |   K  |   W  |   R  |  *3  |                              |  *4  |   R  |   B  |   G  |   S  |    Z   |
// |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
// |        |      |      |      |      |      |      |CapsLk|  |F-keys|      |      |      |      |      |      |        |
// `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
//                        |QWERTY|  #1  |   A  |   O  | Nav  |  | Sym  |  E   |   U  |  #2  |      |
//                        `----------------------------------'  `----------------------------------'
//
// * Tapping QWERTY key will switch to QWERTY mode
// * Holding it down and pressing other buttons will cause the keyboard to return to steno mode when releasing it.

// QWERTY
//
// ,-------------------------------------------.                              ,-------------------------------------------.
// |  Tab   |   Q  |   W  |   E  |   R  |   T  |                              |   Y  |   U  |   I  |   O  |   P  |  Bksp  |
// |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
// |Ctrl/Esc|   A  |   S  |   D  |   F  |   G  |                              |   H  |   J  |   K  |   L  | ;  : |Ctrl/' "|
// |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
// | LShift |   Z  |   X  |   C  |   V  |   B  | [ {  |CapsLk|  |F-keys|  ] } |   N  |   M  | ,  < | . >  | /  ? | RShift |
// `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
//                        |Steno | LGUI | LAlt/| Space| Nav  |  | Sym  | Space| RAlt/| RGUI |      |
//                        |      |      | Enter|      |      |  |      |      | Enter|      |      |
//                        `----------------------------------'  `----------------------------------'
//

//
// Symbols
//
// ,-------------------------------------------.                              ,-------------------------------------------.
// |    `   |  1   |  2   |  3   |  4   |  5   |                              |   6  |  7   |  8   |  9   |  0   |   =    |
// |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
// |    ~   |  !   |  @   |  #   |  $   |  %   |                              |   ^  |  &   |  *   |  (   |  )   |   +    |
// |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
// |    |   |   \  |  :   |  ;   |  -   |  [   |  {   |      |  |      |   }  |   ]  |  _   |  ,   |  .   |  /   |   ?    |
// `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
//                        |      | LGUI | LAlt | LCtrl|      |  |      |      |      |      |      |
//                        `----------------------------------'  `----------------------------------'
//

//
// Function
//
// ,-------------------------------------------.                              ,-------------------------------------------.
// |        |  F9  | F10  | F11  | F12  |      |                              |      |      |      |      |      |        |
// |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
// |        |  F5  |  F6  |  F7  |  F8  |      |                              |      | Shift| Ctrl |  Alt |  GUI |        |
// |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
// |        |  F1  |  F2  |  F3  |  F4  |      |      |      |  |      |      |      |      |      |      |      |        |
// `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
//                        |      |      |      |      |      |  |      |      |      |      |      |
//                        `----------------------------------'  `----------------------------------'

//
// Navigation/Media
//
// ,-------------------------------------------.                              ,-------------------------------------------.
// |        |      |      |      |      |      |                              | Vol+ | BkSp |   ↑  | Del  | PgUp |  Home  |
// |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
// |        |  GUI |  Alt | Ctrl | Shift|      |                              | Vol- |  ←   |   ↓  |   →  | PgDn |   End  |
// |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
// |        |      |      |      |      |      |      |      |  |      |      | Mute |Brght+|      |      |      |        |
// `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
//                        |      |      |      |      |      |  |      | Space| Enter|Brght-|      |
//                        `----------------------------------'  `----------------------------------'
//

//---------------------------------------------------------------------------
// USB Scan code values.
//
// These constants are used with inbuilt functions:
//  * func pressScanCode(SC_xxx)
//  * func releaseScanCode(SC_xxx)
//  * func tapScanCode(SC_xxx)
//  * func isScanCodePressed(SC_xxx) var
//
//---------------------------------------------------------------------------

const SC_NONE = 0;

const SC_A = 0x04;
const SC_B = 0x05;
const SC_C = 0x06;
const SC_D = 0x07;
const SC_E = 0x08;
const SC_F = 0x09;
const SC_G = 0x0a;
const SC_H = 0x0b;
const SC_I = 0x0c;
const SC_J = 0x0d;
const SC_K = 0x0e;
const SC_L = 0x0f;
const SC_M = 0x10;
const SC_N = 0x11;
const SC_O = 0x12;
const SC_P = 0x13;
const SC_Q = 0x14;
const SC_R = 0x15;
const SC_S = 0x16;
const SC_T = 0x17;
const SC_U = 0x18;
const SC_V = 0x19;
const SC_W = 0x1a;
const SC_X = 0x1b;
const SC_Y = 0x1c;
const SC_Z = 0x1d;

const SC_1 = 0x1e;
const SC_2 = 0x1f;
const SC_3 = 0x20;
const SC_4 = 0x21;
const SC_5 = 0x22;
const SC_6 = 0x23;
const SC_7 = 0x24;
const SC_8 = 0x25;
const SC_9 = 0x26;
const SC_0 = 0x27;

const SC_ENTER = 0x28;
const SC_ESC = 0x29;
const SC_BACKSPACE = 0x2a;
const SC_TAB = 0x2b;
const SC_SPACE = 0x2c;
const SC_MINUS = 0x2d;
const SC_EQUAL = 0x2e;
const SC_L_BRACKET = 0x2f;
const SC_R_BRACKET = 0x30;
const SC_BACKSLASH = 0x31;
const SC_HASH_TILDE = 0x32;
const SC_SEMICOLON = 0x33;
const SC_APOSTROPHE = 0x34;
const SC_GRAVE = 0x35;
const SC_COMMA = 0x36;
const SC_DOT = 0x37;
const SC_SLASH = 0x38;
const SC_CAPS = 0x39;

const SC_F1 = 0x3a;
const SC_F2 = 0x3b;
const SC_F3 = 0x3c;
const SC_F4 = 0x3d;
const SC_F5 = 0x3e;
const SC_F6 = 0x3f;
const SC_F7 = 0x40;
const SC_F8 = 0x41;
const SC_F9 = 0x42;
const SC_F10 = 0x43;
const SC_F11 = 0x44;
const SC_F12 = 0x45;

const SC_SYS_RQ = 0x46;
const SC_SCROLL_LOCK = 0x47;
const SC_PAUSE = 0x48;
const SC_INSERT = 0x49;
const SC_HOME = 0x4a;
const SC_PAGE_UP = 0x4b;
const SC_DELETE = 0x4c;
const SC_END = 0x4d;
const SC_PAGE_DOWN = 0x4e;
const SC_RIGHT = 0x4f;
const SC_LEFT = 0x50;
const SC_DOWN = 0x51;
const SC_UP = 0x52;

const SC_NUM_LOCK = 0x53;
const SC_KP_SLASH = 0x54;
const SC_KP_ASTERISK = 0x55;
const SC_KP_MINUS = 0x56;
const SC_KP_PLUS = 0x57;
const SC_KP_ENTER = 0x58;
const SC_KP_1 = 0x59;
const SC_KP_2 = 0x5a;
const SC_KP_3 = 0x5b;
const SC_KP_4 = 0x5c;
const SC_KP_5 = 0x5d;
const SC_KP_6 = 0x5e;
const SC_KP_7 = 0x5f;
const SC_KP_8 = 0x60;
const SC_KP_9 = 0x61;
const SC_KP_0 = 0x62;
const SC_KP_DOT = 0x63;

const SC_BACKSLASH_PIPE = 0x64;
const SC_COMPOSE = 0x65;
const SC_POWER = 0x66;
const SC_KP_EQUAL = 0x67;

const SC_F13 = 0x68;
const SC_F14 = 0x69;
const SC_F15 = 0x6a;
const SC_F16 = 0x6b;
const SC_F17 = 0x6c;
const SC_F18 = 0x6d;
const SC_F19 = 0x6e;
const SC_F20 = 0x6f;
const SC_F21 = 0x70;
const SC_F22 = 0x71;
const SC_F23 = 0x72;
const SC_F24 = 0x73;

const SC_OPEN = 0x74;
const SC_HELP = 0x75;
const SC_MENU = 0x76;
const SC_SELECT = 0x77;
const SC_STOP = 0x78;
const SC_AGAIN = 0x79;
const SC_UNDO = 0x7a;
const SC_CUT = 0x7b;
const SC_COPY = 0x7c;
const SC_PASTE = 0x7d;
const SC_FIND = 0x7e;
const SC_MUTE = 0x7f;
const SC_VOLUME_UP = 0x80;
const SC_VOLUME_DOWN = 0x81;

const SC_KP_COMMA = 0x85;

const SC_KP_LEFT_PAREN = 0xb6;
const SC_KP_RIGHT_PAREN = 0xb7;

const SC_L_CTRL = 0xe0;
const SC_L_SHIFT = 0xe1;
const SC_L_ALT = 0xe2;
const SC_L_META = 0xe3;
const SC_R_CTRL = 0xe4;
const SC_R_SHIFT = 0xe5;
const SC_R_ALT = 0xe6;
const SC_R_META = 0xe7;

const SC_MEDIA_PLAY_PAUSE = 0xe8;
const SC_MEDIA_STOP_CD = 0xe9;
const SC_MEDIA_PREVIOUS_SONG = 0xea;
const SC_MEDIA_NEXT_SONG = 0xeb;
const SC_MEDIA_EJECT_CD = 0xec;
const SC_MEDIA_VOLUME_UP = 0xed;
const SC_MEDIA_VOLUME_DOWN = 0xee;
const SC_MEDIA_MUTE = 0xef;
const SC_MEDIA_WWW = 0xf0;
const SC_MEDIA_BACK = 0xf1;
const SC_MEDIA_FORWARD = 0xf2;
const SC_MEDIA_STOP = 0xf3;
const SC_MEDIA_FIND = 0xf4;
const SC_MEDIA_SCROLL_UP = 0xf5;
const SC_MEDIA_SCROLL_DOWN = 0xf6;
const SC_MEDIA_EDIT = 0xf7;
const SC_MEDIA_SLEEP = 0xf8;
const SC_MEDIA_COFFEE = 0xf9;
const SC_MEDIA_REFRESH = 0xfa;
const SC_MEDIA_CALC = 0xfb;

//---------------------------------------------------------------------------
// javelin-steno steno key values.
//
// These constants are used with inbuilt functions:
//  * func pressStenoKey(SK_xxx)
//  * func releaseStenoKey(SK_xxx)
//  * func isStenoKeyPressed(SK_xxx) var
//
//---------------------------------------------------------------------------

const SK_NONE = -1;
const SK_S1 = 0;
const SK_S2 = 1;
const SK_TL = 2;
const SK_KL = 3;
const SK_PL = 4;
const SK_WL = 5;
const SK_HL = 6;
const SK_RL = 7;
const SK_A = 8;
const SK_O = 9;
const SK_STAR1 = 10;
const SK_STAR2 = 11;
const SK_STAR3 = 12;
const SK_STAR4 = 13;
const SK_E = 14;
const SK_U = 15;
const SK_FR = 16;
const SK_RR = 17;
const SK_PR = 18;
const SK_BR = 19;
const SK_LR = 20;
const SK_GR = 21;
const SK_TR = 22;
const SK_SR = 23;
const SK_DR = 24;
const SK_ZR = 25;
const SK_NUM1 = 26;
const SK_NUM2 = 27;
const SK_NUM3 = 28;
const SK_NUM4 = 29;
const SK_NUM5 = 30;
const SK_NUM6 = 31;
const SK_NUM7 = 32;
const SK_NUM8 = 33;
const SK_NUM9 = 34;
const SK_NUM10 = 35;
const SK_NUM11 = 36;
const SK_NUM12 = 37;
const SK_FUNCTION = 38;
const SK_POWER = 39;
const SK_RES1 = 40;
const SK_RES2 = 41;

//---------------------------------------------------------------------------
// Other functions:
//
//  * func releaseAll()
//    - releases all pressed scan codes and steno keys.
//  * func pressAll()
//    - call all press scripts for buttons that are pressed.
//  * func isInPressAll() var
//    - returns non-zero if a pressAll is being processed.
//  * func isButtonPressed(buttonIndex) var
//    - Returns 1 if the physical button is pressed.
//  * func checkButtonState("01 10") var
//    - Returns if the current button state matches the string.
//    - 0 = not pressed, space = ignore, all others = pressed.
//      - The example string checks that:
//        - button 0 is off.
//        - button 1 is on.
//        - button 3 is on.
//        - button 4 is off.
//    - The string should be the same length as the number of buttons.
//  * func sendText("Example")
//    - Sends all of the key presses required to emit the specified string.
//    - e.g.,
//      - Press Shift
//      - Press E
//      - Release E
//      - Release Shift
//      - Press X
//      - Release X
//      - etc.
//  * func setRgb(id, r, g, b)
//    - For boards with rgb lights, this can control individual lights.
//  * func getTime() var
//    - Returns milliseconds since launch.
//  * func getLedStatus(id) var
//    - Returns whether the led statues is on. See LED_STATUS constants.
//
// releaseAll() and pressAll() are useful for changing modes/layers, e.g.:
//
// if (layer != SYMBOL_LAYER) {
//   releaseAll();
//   layer = SYMBOL_LAYER;
//   pressAll();
// }
//
// This will allow keys on the symbol layer to be pressed 'out-of-order' but
// still behave as expected.
//
// It is important that every pressAll() call in an onPress handler is guarded
// to prevent infinite recursion, since the onPress will be re-run even for the
// current key. The easiest way to do this is using isInPressAll() function.
//

const LED_STATUS_NUM_LOCK = 0;
const LED_STATUS_CAPS_LOCK = 1;
const LED_STATUS_SCROLL_LOCK = 2;
const LED_STATUS_COMPOSE = 3;
const LED_STATUS_KANA = 4;

const AUTO_DRAW_NONE = 0;
const AUTO_DRAW_PAPER_TAPE = 1;
const AUTO_DRAW_STENO_LAYOUT = 2;
const AUTO_DRAW_WPM = 3;

//---------------------------------------------------------------------------
//
// Kyria rev3 button layout:
//
// Button indexes
//
//      0   1   2   3   4   5          |           6   7   8   9  10  11
//     12  13  14  15  16  17          |          18  19  20  21  22  23
//     24  25  26  27  28  29  30  31  |  32  33  34  35  36  37  38  39
//                 40  41  42  43  44  |  45  46  47  48  49
//
// RGB indices follow button indices, with underglow lights defined from 50-61.
//
//---------------------------------------------------------------------------
// Example global variable:
//   var layers = 0;

// Example local functions:
//
//   func useNavLayer() var {
//     return isButtonPressed(22);
//   }
//
//   func handlePress(stenoKey, navKey) {
//     if (useNavLayer()) {
//       pressScanCode(navKey);
//     } else {
//       pressStenoKey(stenoKey);
//     }
//   }
//
// Then the onPress handler could call handlePress(SK_S1, SC_TAB);

//---------------------------------------------------------------------------
// The script needs to have onPress## and onRelease## functions for every
// physical button.
//---------------------------------------------------------------------------

const QWERTY_LAYER = 0;
const STENO_MASK = 1;
const SYMBOL_MASK = 2;
const FUNCTION_MASK = 4;
const NAV_MASK = 8;

var layer = STENO_MASK;
var otherPressCount = 0;
var brightness = 6;
var lastActionTime = 0;
var lastCapsLockStatus = 0;

const SYM_SHIFT = 0x100;
const TAP_THRESHOLD = 200; // milliseconds for keys that have alternates.
const SCREEN_OFF_TIMEOUT = 30000; // 30 seconds.

const SHIFT_IMAGE = [[
  10 10
  00 01 80 01 c0 01 e0 01 f0 7f f8 7f fc 7f fe 7f
  fe 7f fc 7f f8 7f f0 7f e0 01 c0 01 80 01 00 01
]];

const CONTROL_IMAGE = [[
  10 10
  00 00 00 00 40 00 60 00 30 00 18 00 0c 00 06 00
  06 00 0c 00 18 00 30 00 60 00 40 00 00 00 00 00
]];

const ALT_IMAGE = [[
  10 10
  00 00 00 30 00 30 00 30 00 30 00 38 00 1e 80 07
  e0 01 78 30 1c 30 0c 30 0c 30 0c 30 0c 30 00 00
]];

const COMMAND_IMAGE = [[
  10 10
  00 00 3c 3c 7e 7e 66 66 66 66 fe 7f fc 3f 60 06
  60 06 fc 3f fe 7f 66 66 66 66 7e 7e 3c 3c 00 00
]];

const CAPS_LOCK_IMAGE = [[
  10 10
  00 01 80 01 c0 01 e0 01 f0 67 f8 67 fc 67 fe 67
  fe 67 fc 67 f8 67 f0 67 e0 01 c0 01 80 01 00 01
]];

func init() {
  updateKeyRgb();
  updateUnderglowRgb();
  updateScreenContrast();

  // Disable liatris power light.
  // setGpioPin(24, 1);

  updateDisplay0();
  setAutoDraw(1, AUTO_DRAW_WPM);
}

func tick() {
  var screenOn = getTime() - lastActionTime <= SCREEN_OFF_TIMEOUT;
  setScreenOn(0, screenOn);
  setScreenOn(1, screenOn);

  var capsLockStatus = getLedStatus(LED_STATUS_CAPS_LOCK);
  if (capsLockStatus != lastCapsLockStatus)  {
    lastCapsLockStatus = capsLockStatus;
    updateCapsLockRgb();
    updateDisplay0();
  }
}

func updateCapsLockRgb() {
  if (getLedStatus(LED_STATUS_CAPS_LOCK)) {
    setRgb(31, 64, 64, 64);
  } else {
    applyRgb(31, 0, 69, 54);
  }
}

func applyRgb(id, r, g, b) {
  setRgb(id, (r * brightness) >> 3, (g * brightness) >> 3, (b * brightness) >> 3);
}

func updateKeyRgb() {
  applyRgb(0, 0, 88, 16);
  applyRgb(1, 0, 87, 18);
  applyRgb(2, 0, 86, 20);
  applyRgb(3, 0, 85, 22);
  applyRgb(4, 0, 84, 24);
  applyRgb(5, 0, 83, 26);
  applyRgb(6, 57, 26, 26);
  applyRgb(7, 60, 24, 24);
  applyRgb(8, 63, 22, 22);
  applyRgb(9, 66, 20, 20);
  applyRgb(10, 69, 18, 18);
  applyRgb(11, 72, 16, 16);
  applyRgb(12, 0, 82, 28);
  applyRgb(13, 0, 81, 30);
  applyRgb(14, 0, 80, 32);
  applyRgb(15, 0, 79, 34);
  applyRgb(16, 0, 78, 36);
  applyRgb(17, 0, 77, 38);
  applyRgb(18, 39, 38, 38);
  applyRgb(19, 42, 36, 36);
  applyRgb(20, 45, 34, 34);
  applyRgb(21, 48, 32, 32);
  applyRgb(22, 51, 30, 30);
  applyRgb(23, 54, 28, 28);
  applyRgb(24, 0, 76, 40);
  applyRgb(25, 0, 75, 42);
  applyRgb(26, 0, 74, 44);
  applyRgb(27, 0, 73, 46);
  applyRgb(28, 0, 72, 48);
  applyRgb(29, 0, 71, 50);
  applyRgb(30, 0, 70, 52);
  updateCapsLockRgb();
  applyRgb(32, 15, 54, 54);
  applyRgb(33, 18, 52, 52);
  applyRgb(34, 21, 50, 50);
  applyRgb(35, 24, 48, 48);
  applyRgb(36, 27, 46, 46);
  applyRgb(37, 30, 44, 44);
  applyRgb(38, 33, 42, 42);
  applyRgb(39, 36, 40, 40);
  applyRgb(40, 0, 68, 56);
  applyRgb(41, 0, 67, 58);
  applyRgb(42, 0, 66, 60);
  applyRgb(43, 0, 65, 62);
  applyRgb(44, 0, 64, 64);
  applyRgb(45, 0, 64, 64);
  applyRgb(46, 3, 62, 62);
  applyRgb(47, 6, 60, 60);
  applyRgb(48, 9, 58, 58);
  applyRgb(49, 12, 56, 56);
}

func setUnderglow(r, g, b) {
  for(var i = 50; i < 62; i = i + 1) {
    applyRgb(i, r, g, b);
  }
}

func updateUnderglowRgb() {
  if (layer & STENO_MASK) {
    setUnderglow(64, 64, 64);
  } else {
    setUnderglow(64, 0, 16);
  }
}

func updateScreenContrast() {
  var contrast = 16 + 30 * brightness;
  setScreenContrast(0, contrast);
  setScreenContrast(1, contrast);
}

func drawDisplay0NonSteno(layerName) {
  setAutoDraw(0, AUTO_DRAW_NONE);
  clearDisplay(0);
  drawText(0, 0, 10, 0, "Kyria (Javelin)");
  drawLine(0, 0, 12, 80, 12, 1);
  drawText(0, 0, 32, 0, layerName);

  if (isScanCodePressed(SC_L_SHIFT) || isScanCodePressed(SC_R_SHIFT)) {
    drawImage(0, 0, 48, SHIFT_IMAGE);
  }
  if (isScanCodePressed(SC_L_CTRL) || isScanCodePressed(SC_R_CTRL)) {
    drawImage(0, 16, 48, CONTROL_IMAGE);
  }
  if (isScanCodePressed(SC_L_ALT) || isScanCodePressed(SC_R_ALT)) {
    drawImage(0, 32, 48, ALT_IMAGE);
  }
  if (isScanCodePressed(SC_L_META) || isScanCodePressed(SC_R_META)) {
    drawImage(0, 48, 48, COMMAND_IMAGE);
  }
  if (getLedStatus(LED_STATUS_CAPS_LOCK)) {
    drawImage(0, 112, 48, CAPS_LOCK_IMAGE);
  }
}

func updateDisplay0() {
  if (layer & NAV_MASK) {
    drawDisplay0NonSteno("Layer: Navigation");
  } else if (layer & FUNCTION_MASK) {
    drawDisplay0NonSteno("Layer: Function");
  } else if (layer & SYMBOL_MASK) {
    drawDisplay0NonSteno("Layer: Symbol");
  } else if (layer & STENO_MASK) {
    setAutoDraw(0, AUTO_DRAW_PAPER_TAPE);
  } else {
    drawDisplay0NonSteno("Layer: QWERTY");
  }
}

func isDisplayUpdateScanCode(scanCode) var {
  return scanCode == SC_L_SHIFT
    || scanCode == SC_R_SHIFT
    || scanCode == SC_L_CTRL
    || scanCode == SC_R_CTRL
    || scanCode == SC_L_ALT
    || scanCode == SC_R_ALT
    || scanCode == SC_L_META
    || scanCode == SC_R_META;
}

func pressScanCodeAndUpdateDisplay(scanCode) {
  pressScanCode(scanCode);
  if (isDisplayUpdateScanCode(scanCode)) {
    updateDisplay0();
  }
}

func releaseScanCodeAndUpdateDisplay(scanCode) {
  releaseScanCode(scanCode);
  if (isDisplayUpdateScanCode(scanCode)) {
    updateDisplay0();
  }
}

func handlePress(qwertyKey, stenoKey, symbolsKey, functionKey, navKey) {
  lastActionTime = getTime();
  otherPressCount = otherPressCount + 1;
  if (layer & NAV_MASK) {
    pressScanCodeAndUpdateDisplay(navKey);
  } else if (layer & FUNCTION_MASK) {
    pressScanCodeAndUpdateDisplay(functionKey);
  } else if (layer & SYMBOL_MASK) {
    if (symbolsKey & SYM_SHIFT) {
      pressScanCode(SC_L_SHIFT);
    }
    pressScanCodeAndUpdateDisplay(symbolsKey & 0xff);
  } else if (layer & STENO_MASK) {
    pressStenoKey(stenoKey);
  } else {
    pressScanCodeAndUpdateDisplay(qwertyKey);
  }
}

func handleRelease(qwertyKey, stenoKey, symbolsKey, functionKey, navKey) {
  lastActionTime = getTime();
  if (layer & NAV_MASK) {
    releaseScanCodeAndUpdateDisplay(navKey);
  } if (layer & FUNCTION_MASK) {
    releaseScanCodeAndUpdateDisplay(functionKey);
  } else if (layer & SYMBOL_MASK) {
    releaseScanCodeAndUpdateDisplay(symbolsKey & 0xff);
    if (symbolsKey & SYM_SHIFT) {
      releaseScanCode(SC_L_SHIFT);
    }
  } else if (layer & STENO_MASK) {
    releaseStenoKey(stenoKey);
  } else {
    releaseScanCodeAndUpdateDisplay(qwertyKey);
  }
}

func onPress0() { handlePress(SC_TAB, SK_NONE, SC_GRAVE, SC_NONE, SC_NONE); }
func onRelease0() { handleRelease(SC_TAB, SK_NONE, SC_GRAVE, SC_NONE, SC_NONE); }

func onPress1() { handlePress(SC_Q, SK_S1, SC_1, SC_F9, SC_NONE); }
func onRelease1() { handleRelease(SC_Q, SK_S1, SC_1, SC_F9, SC_NONE); }

func onPress2() { handlePress(SC_W, SK_TL, SC_2, SC_F10, SC_NONE); }
func onRelease2() { handleRelease(SC_W, SK_TL, SC_2, SC_F10, SC_NONE); }

func onPress3() { handlePress(SC_E, SK_PL, SC_3, SC_F11, SC_NONE); }
func onRelease3() { handleRelease(SC_E, SK_PL, SC_3, SC_F11, SC_NONE); }

func onPress4() { handlePress(SC_R, SK_HL, SC_4, SC_F12, SC_NONE); }
func onRelease4() { handleRelease(SC_R, SK_HL, SC_4, SC_F12, SC_NONE); }

func onPress5() { handlePress(SC_T, SK_STAR1, SC_5, SC_NONE, SC_NONE); }
func onRelease5() { handleRelease(SC_T, SK_STAR1, SC_5, SC_NONE, SC_NONE); }

func onPress6() { handlePress(SC_Y, SK_STAR2, SC_6, SC_NONE, SC_VOLUME_UP); }
func onRelease6() { handleRelease(SC_Y, SK_STAR2, SC_6, SC_NONE, SC_VOLUME_UP); }

func onPress7() { handlePress(SC_U, SK_FR, SC_7, SC_NONE, SC_BACKSPACE); }
func onRelease7() { handleRelease(SC_U, SK_FR, SC_7, SC_NONE, SC_BACKSPACE); }

func onPress8() { handlePress(SC_I, SK_PR, SC_8, SC_NONE, SC_UP); }
func onRelease8() { handleRelease(SC_I, SK_PR, SC_8, SC_NONE, SC_UP); }

func onPress9() { handlePress(SC_O, SK_LR, SC_9, SC_NONE, SC_DELETE); }
func onRelease9() { handleRelease(SC_O, SK_LR, SC_9, SC_NONE, SC_DELETE); }

func onPress10() { handlePress(SC_P, SK_TR, SC_0, SC_NONE, SC_PAGE_UP); }
func onRelease10() { handleRelease(SC_P, SK_TR, SC_0, SC_NONE, SC_PAGE_UP); }

func onPress11() { handlePress(SC_BACKSPACE, SK_DR, SC_EQUAL, SC_NONE, SC_HOME); }
func onRelease11() { handleRelease(SC_BACKSPACE, SK_DR, SC_EQUAL, SC_NONE, SC_HOME); }

var timer12;
func onPress12() {
  handlePress(SC_L_CTRL, SK_NONE, SC_GRAVE | SYM_SHIFT, SC_NONE, SC_NONE);
  timer12 = getTime();
  otherPressCount = 0;
}
func onRelease12() {
  handleRelease(SC_L_CTRL, SK_NONE, SC_GRAVE | SYM_SHIFT, SC_NONE, SC_NONE);
  if ((layer | otherPressCount) == 0 && getTime() - timer12 < TAP_THRESHOLD) {
    tapScanCode(SC_ESC);
  }
}

func onPress13() { handlePress(SC_A, SK_S2, SC_1 | SYM_SHIFT, SC_F5, SC_L_META); }
func onRelease13() { handleRelease(SC_A, SK_S2, SC_1 | SYM_SHIFT, SC_F5, SC_L_META); }

func onPress14() { handlePress(SC_S, SK_KL, SC_2 | SYM_SHIFT, SC_F6, SC_L_ALT); }
func onRelease14() { handleRelease(SC_S, SK_KL, SC_2 | SYM_SHIFT, SC_F6, SC_L_ALT); }

func onPress15() { handlePress(SC_D, SK_WL, SC_3 | SYM_SHIFT, SC_F7, SC_L_CTRL); }
func onRelease15() { handleRelease(SC_D, SK_WL, SC_3 | SYM_SHIFT, SC_F7, SC_L_CTRL); }

func onPress16() { handlePress(SC_F, SK_RL, SC_4 | SYM_SHIFT, SC_F8, SC_L_SHIFT); }
func onRelease16() { handleRelease(SC_F, SK_RL, SC_4 | SYM_SHIFT, SC_F8, SC_L_SHIFT); }

func onPress17() { handlePress(SC_G, SK_STAR3, SC_5 | SYM_SHIFT, SC_NONE, SC_NONE); }
func onRelease17() { handleRelease(SC_G, SK_STAR3, SC_5 | SYM_SHIFT, SC_NONE, SC_NONE); }

func onPress18() { handlePress(SC_H, SK_STAR4, SC_6 | SYM_SHIFT, SC_NONE, SC_VOLUME_DOWN); }
func onRelease18() { handleRelease(SC_H, SK_STAR4, SC_6 | SYM_SHIFT, SC_NONE, SC_VOLUME_DOWN); }

func onPress19() { handlePress(SC_J, SK_RR, SC_7 | SYM_SHIFT, SC_L_SHIFT, SC_LEFT); }
func onRelease19() { handleRelease(SC_J, SK_RR, SC_7 | SYM_SHIFT, SC_L_SHIFT, SC_LEFT); }

func onPress20() { handlePress(SC_K, SK_BR, SC_8 | SYM_SHIFT, SC_L_CTRL, SC_DOWN); }
func onRelease20() { handleRelease(SC_K, SK_BR, SC_8 | SYM_SHIFT, SC_L_CTRL, SC_DOWN); }

func onPress21() { handlePress(SC_L, SK_GR, SC_9 | SYM_SHIFT, SC_L_ALT, SC_RIGHT); }
func onRelease21() { handleRelease(SC_L, SK_GR, SC_9 | SYM_SHIFT, SC_L_ALT, SC_RIGHT); }

func onPress22() { handlePress(SC_SEMICOLON, SK_SR, SC_0 | SYM_SHIFT, SC_L_META, SC_PAGE_DOWN); }
func onRelease22() { handleRelease(SC_SEMICOLON, SK_SR, SC_0 | SYM_SHIFT, SC_L_META, SC_PAGE_DOWN); }

var timer23;
func onPress23() {
  handlePress(SC_R_CTRL, SK_ZR, SC_EQUAL | SYM_SHIFT, SC_NONE, SC_END);
  timer23 = getTime();
  otherPressCount = 0;
}
func onRelease23() {
  handleRelease(SC_R_CTRL, SK_ZR, SC_EQUAL | SYM_SHIFT, SC_NONE, SC_END);
  if ((layer | otherPressCount) == 0 && getTime() - timer23 < TAP_THRESHOLD) {
    tapScanCode(SC_APOSTROPHE);
  }
}

func onPress24() { handlePress(SC_L_SHIFT, SK_NONE, SC_BACKSLASH | SYM_SHIFT, SC_NONE, SC_NONE); }
func onRelease24() { handleRelease(SC_L_SHIFT, SK_NONE, SC_BACKSLASH | SYM_SHIFT, SC_NONE, SC_NONE); }

func onPress25() { handlePress(SC_Z, SK_NONE, SC_BACKSLASH, SC_F1, SC_NONE); }
func onRelease25() { handleRelease(SC_Z, SK_NONE, SC_BACKSLASH, SC_F1, SC_NONE); }

func onPress26() { handlePress(SC_X, SK_NONE, SC_SEMICOLON | SYM_SHIFT, SC_F2, SC_NONE); }
func onRelease26() { handleRelease(SC_X, SK_NONE, SC_SEMICOLON | SYM_SHIFT, SC_F2, SC_NONE); }

func onPress27() { handlePress(SC_C, SK_NONE, SC_SEMICOLON, SC_F3, SC_NONE); }
func onRelease27() { handleRelease(SC_C, SK_NONE, SC_SEMICOLON, SC_F3, SC_NONE); }

func onPress28() { handlePress(SC_V, SK_NONE, SC_MINUS, SC_F4, SC_NONE); }
func onRelease28() { handleRelease(SC_V, SK_NONE, SC_MINUS, SC_F4, SC_NONE); }

func onPress29() { handlePress(SC_B, SK_NONE, SC_L_BRACKET, SC_NONE, SC_NONE); }
func onRelease29() { handleRelease(SC_B, SK_NONE, SC_L_BRACKET, SC_NONE, SC_NONE); }

func onPress30() { handlePress(SC_L_BRACKET, SK_NONE, SC_L_BRACKET | SYM_SHIFT, SC_NONE, SC_NONE); }
func onRelease30() { handleRelease(SC_L_BRACKET, SK_NONE, SC_L_BRACKET | SYM_SHIFT, SC_NONE, SC_NONE); }

func onPress31() {
  lastActionTime = getTime();
  if (layer >> 1) return;

  pressScanCode(SC_CAPS);
}
func onRelease31() {
  lastActionTime = getTime();
  if (layer >> 1) return;

  releaseScanCode(SC_CAPS);
}

func onPress32() {
  lastActionTime = getTime();
  if (layer >> 1) return;

  releaseAll();
  layer = layer | FUNCTION_MASK;
  pressAll();

  updateDisplay0();
}

func onRelease32() {
  lastActionTime = getTime();
  if (layer & FUNCTION_MASK) {
    releaseAll();
    layer = layer ^ FUNCTION_MASK;
    updateDisplay0();
  }
}

func onPress33() { handlePress(SC_R_BRACKET, SK_NONE, SC_R_BRACKET | SYM_SHIFT, SC_NONE, SC_NONE); }
func onRelease33() { handleRelease(SC_R_BRACKET, SK_NONE, SC_R_BRACKET | SYM_SHIFT, SC_NONE, SC_NONE); }

func onPress34() { handlePress(SC_N, SK_NONE, SC_R_BRACKET, SC_NONE, SC_MUTE); }
func onRelease34() { handleRelease(SC_N, SK_NONE, SC_R_BRACKET, SC_NONE, SC_MUTE); }

func onPress35() {
  handlePress(SC_M, SK_NONE, SC_MINUS | SYM_SHIFT, SC_NONE, SC_NONE);

  if (layer & NAV_MASK) {
    if (brightness < 8) {
      brightness = brightness + 1;
      updateKeyRgb();
      updateUnderglowRgb();
      updateScreenContrast();
    }
  }
}
func onRelease35() { handleRelease(SC_M, SK_NONE, SC_MINUS | SYM_SHIFT, SC_NONE, SC_NONE); }

func onPress36() { handlePress(SC_COMMA, SK_NONE, SC_COMMA, SC_NONE, SC_NONE); }
func onRelease36() { handleRelease(SC_COMMA, SK_NONE, SC_COMMA, SC_NONE, SC_NONE); }

func onPress37() { handlePress(SC_DOT, SK_NONE, SC_DOT, SC_NONE, SC_NONE); }
func onRelease37() { handleRelease(SC_DOT, SK_NONE, SC_DOT, SC_NONE, SC_NONE); }

func onPress38() { handlePress(SC_SLASH, SK_NONE, SC_SLASH, SC_NONE, SC_NONE); }
func onRelease38() { handleRelease(SC_SLASH, SK_NONE, SC_SLASH, SC_NONE, SC_NONE); }

func onPress39() { handlePress(SC_R_SHIFT, SK_NONE, SC_SLASH | SYM_SHIFT, SC_NONE, SC_NONE); }
func onRelease39() { handleRelease(SC_R_SHIFT, SK_NONE, SC_SLASH | SYM_SHIFT, SC_NONE, SC_NONE); }

func onPress40() {
  lastActionTime = getTime();
  if (isInPressAll()) return;
  if (layer >> 1) return;

  releaseAll();
  layer = layer ^ STENO_MASK;
  otherPressCount = 0;
  pressAll();
  updateDisplay0();

  // Only update for steno, since temporary QWERTY mode will cause distracting
  // flicker.
  if (layer & STENO_MASK) {
    updateUnderglowRgb();
  }
}
func onRelease40() {
  lastActionTime = getTime();
  // Updating here and below won't cause flicker because the RGB update only
  // occurs once all the button scripts complete updating.
  updateUnderglowRgb();

  if (otherPressCount == 0) return;
  if (layer >> 1) return;
  if (layer & STENO_MASK) return;

  releaseAll();
  layer = layer ^ STENO_MASK;
  updateUnderglowRgb();
  updateDisplay0();
}

func onPress41() { handlePress(SC_L_META, SK_NUM1, SC_L_META, SC_NONE, SC_NONE); }
func onRelease41() { handleRelease(SC_L_META, SK_NUM1, SC_L_META, SC_NONE, SC_NONE); }

var timer42;
func onPress42() {
  handlePress(SC_L_ALT, SK_A, SC_L_ALT, SC_NONE, SC_NONE);
  timer42 = getTime();
  otherPressCount = 0;
}
func onRelease42() {
  handleRelease(SC_L_ALT, SK_A, SC_L_ALT, SC_NONE, SC_NONE);
  if ((layer | otherPressCount) == 0 && getTime() - timer42 < TAP_THRESHOLD) {
    tapScanCode(SC_ENTER);
  }
}

func onPress43() { handlePress(SC_SPACE, SK_O, SC_L_CTRL, SC_NONE, SC_NONE); }
func onRelease43() { handleRelease(SC_SPACE, SK_O, SC_L_CTRL, SC_NONE, SC_NONE); }

func onPress44() {
  lastActionTime = getTime();
  if (layer >> 1) return;

  releaseAll();
  layer = layer | NAV_MASK;
  pressAll();
  updateDisplay0();
}

func onRelease44() {
  lastActionTime = getTime();
  if (layer & NAV_MASK) {
    releaseAll();
    layer = layer ^ NAV_MASK;
    updateDisplay0();
  }
  if (checkButtonState("00001100000000000000000000000000000000000000000000")) {
    console("launch_bootrom");
  }
  if (checkButtonState("00110000000000000000000000000000000000000000000000")) {
    console("launch_slave_bootrom");
  }
}

func onPress45() {
  lastActionTime = getTime();
  if (layer >> 1) return;

  releaseAll();
  layer = layer | SYMBOL_MASK;
  pressAll();
  updateDisplay0();
}

func onRelease45() {
  lastActionTime = getTime();
  if (layer & SYMBOL_MASK) {
    releaseAll();
    layer = layer ^ SYMBOL_MASK;
    updateDisplay0();
  }
}

func onPress46() { handlePress(SC_SPACE, SK_E, SC_NONE, SC_NONE, SC_SPACE); }
func onRelease46() { handleRelease(SC_SPACE, SK_E, SC_NONE, SC_NONE, SC_SPACE); }

var timer47;
func onPress47() {
  handlePress(SC_R_ALT, SK_U, SC_NONE, SC_NONE, SC_ENTER);
  timer47 = getTime();
  otherPressCount = 0;
}
func onRelease47() {
  handleRelease(SC_R_ALT, SK_U, SC_NONE, SC_NONE, SC_ENTER);
  if ((layer | otherPressCount) == 0 && getTime() - timer47 < TAP_THRESHOLD) {
    tapScanCode(SC_ENTER);
  }
}

func onPress48() {
  handlePress(SC_R_META, SK_NUM2, SC_NONE, SC_NONE, SC_NONE);

  if (layer & NAV_MASK) {
    if (brightness > 0) {
      brightness = brightness - 1;
      updateKeyRgb();
      updateUnderglowRgb();
      updateScreenContrast();
    }
  }
}
func onRelease48() { handleRelease(SC_R_META, SK_NUM2, SC_NONE, SC_NONE, SC_NONE); }

func onPress49() {
  lastActionTime = getTime();
}
func onRelease49() {
  lastActionTime = getTime();
}
