//---------------------------------------------------------------------------
// Default Baltazar script.
//---------------------------------------------------------------------------
//
// Baltazar button layout:
//
// Button indexes
//      0    1   2   3   4   5      |       6   7   8   9   10  11
//      12  13  14  15  16  17      |       18  19  20  21  22  23
//      24  25  26  27  28  29      |       30  31  32  33  34  35
//
//              36  37  38  39      |       40  41  42  43
//
//
//      44  45  46  47  48          |           49  50  51  52  53
//
// -----------------------------------------------------------------------------------------------------------------------------
// Layer Order: handlePress(QWERTY, STENO, SYMBOL, FUNCTION, NAV)  | (0,1,2,4,8)
// -----------------------------------------------------------------------------------------------------------------------------
// QWERTY = 0
//
//                  ,---------------------------.                               ,---------------------------.
//                 |   W  |   E  |   R  |   T   |                              |  Y    |   U  |   I  |   O  |
//  ,-------+------+------+------+------+-------|                              |-------+------+------+------+------+--------.
// |  TAB   |  Q   |   S  |   D  |   F  |   G   |                              |   H   |   J  |   K  |   L  |   P  |    Å   |
// |--------+------+------+------+------+-------|                              |-------+------+------+------+------+--------|
// |Shft/Esc|  A   |   X  |   C  |   V  |   B   |                              |   N   |   M  |   ,  |   .  |   Ö  |    Ä   |
// |--------+------+------+------+------+-------'                              '-------+------+------+------+------+--------'
// |  Ctrl  |  Z   |                                                                                        |   -  | Shift  |
// `---------------'                                                                                        '---------------'
//                         ,-----+------+------+------.               ,-----+------+------+------.  
//                        | STENO| Alt  |Space |  SYM |              |  NAV | Entr | AltGr| WIN  | 
//                         `--------------------------'               `--------------------------'
//                               [ ] [ ] [ ] [ ] [ ]                       [ ] [ ] [ ] [ ] [ ]
// 
// -----------------------------------------------------------------------------------------------------------------------------
// STENO = 1
//
//                  ,---------------------------.                               ,---------------------------.
//                 |   #  |   #  |   #  |   #   |                              |  #    |   #  |   #  |   #  |
//  ,-------+------+------+------+------+-------|                              |-------+------+------+------+------+--------.
// |  Strk# |  #   |   T  |   P  |   H  |  *1   |                              |  *2   |   F  |   P  |   L  |   S  |    Z   |
// |--------+------+------+------+------+-------|                              |-------+------+------+------+------+--------|
// |Shft/Esc|  S1  |   K  |   W  |   R  |  *3   |                              |  *4   |   R  |   B  |   G  |   T  |    D   |
// |--------+------+------+------+------+-------'                              '-------+------+------+------+------+--------'
// |SupSpace|  S2  |                                                                                        |   S  |    Z   |
// `---------------'                                                                                        '---------------'
//                         ,------+------+------+------.               ,------+------+------+------.  
//                        |QWERTY |   #  |   A  |   O   |              |   E  |   U  |  #  |  Win  | 
//                        `----------------------------'               `---------------------------'
//                               [ ] [ ] [ ] [ ] [ ]                       [ ] [ ] [ ] [ ] [ ]
//
// * Tapping QWERTY key will switch to QWERTY mode
// * Holding it down and pressing other buttons will cause the keyboard to return to steno mode when releasing it.
// -----------------------------------------------------------------------------------------------------------------------------
// SYMBOL = 2
//
//                  ,----------------------------.                               ,---------------------------.
//                  |   2  |   3  |  4   |   5   |                              |   6   |   7  |   8  |   9  |
//  ,-------+-------+------+------+------+-------|                              |-------+------+------+------+-------+-------.
// |   §    |   1   |   "  |   #  |  =   |   %   |                              |   &   |  /   |  (   |   )  |   0   |   '   |
// |--------+-------+------+------+------+-------|                              |-------+------+------+------+-------+-------|
// |   Esc  |   !   |  @   |   +  |  {   |  }    |                              |   [   |  ]   |  <   |   >  |   ?   |   |   |
// |--------+-------+------+------+------+-------'                              '-------+------+------+------+-------+-------'
// |   ^    |   ~   |                                                                                        |   \   |   *   |
// `----------------'                                                                                        '---------------'
//                         ,------+------+------+------.               ,-----+------+------+------.  
//                        |       | Alt  |BckSpc|  SYM |              |  NAV |      | AltGr| Win  | 
//                         `---------------------------'               `--------------------------'
//                               [ ] [ ] [ ] [ ] [ ]                       [ ] [ ] [ ] [ ] [ ]
// 
// -----------------------------------------------------------------------------------------------------------------------------
// NAV = 8   
//
//                  ,----------------------------.                               ,---------------------------.
//                  |  F1  |  F2  |  F3  |  F4   |                              | VolUp |BckSpc|Insert| Del  |
//  ,-------+-------+------+------+------+-------|                              |-------+------+------+------+-------+-------.
// |        |       |  F5  |  F6  |  F7  |  F8   |                              | VolDwn| HOME |  UP  | END  |  PgUp |   ´   | 
// |--------+-------+------+------+------+-------|                              |-------+------+------+------+-------+-------|
// |Shft/Esc|       |  F9  |  F10 |  F11 |  F12  |                              |  Mute | LEFT | DOWN | RIGHT|CtrlBsp|CtrlDel|
// |--------+-------+------+------+------+-------'                              '-------+------+------+------+-------+-------'
// |        |       |                                                                                        | PgDwn |   `   |
// `----------------'                                                                                        '---------------'
//                         ,------+------+------+------.               ,-----+------+------+------.  
//                        |       |      |      |  SYM |              |  NAV |      |      |      | 
//                         `---------------------------'               `--------------------------'
//                               [ ] [ ] [ ] [ ] [ ]                       [ ] [ ] [ ] [ ] [ ]
// 
// -----------------------------------------------------------------------------------------------------------------------------
// FUNCTION = 4 (Note: no key mapped to access layer)
//
//                  ,----------------------------.                               ,---------------------------.
//                  |      |      |      |       |                              |       |      |      |      |
//  ,-------+-------+------+------+------+-------|                              |-------+------+------+------+-------+-------.
// |        |       |      |      |      |       |                              |       |      |      |      |       |       |
// |--------+-------+------+------+------+-------|                              |-------+------+------+------+-------+-------|
// |Shft/Esc|       |      |      |      |       |                              |       |      |      |      |       |       |
// |--------+-------+------+------+------+-------'                              '-------+------+------+------+-------+-------'
// |        |       |                                                                                        |       |       |
// `----------------'                                                                                        '---------------'
//                         ,------+------+------+------.               ,-----+------+------+------.  
//                        |       |      |      |      |              |      |      |      |      | 
//                         `---------------------------'               `--------------------------'
//                               [ ] [ ] [ ] [ ] [ ]                       [ ] [ ] [ ] [ ] [ ]
// 
// -----------------------------------------------------------------------------------------------------------------------------
// TEMPLATE
//
//                  ,----------------------------.                               ,---------------------------.
//                  |      |      |      |       |                              |       |      |      |      |
//  ,-------+-------+------+------+------+-------|                              |-------+------+------+------+-------+-------.
// |        |       |      |      |      |       |                              |       |      |      |      |       |       |
// |--------+-------+------+------+------+-------|                              |-------+------+------+------+-------+-------|
// |Shft/Esc|       |      |      |      |       |                              |       |      |      |      |       |       |
// |--------+-------+------+------+------+-------'                              '-------+------+------+------+-------+-------'
// |        |       |                                                                                        |       |       |
// `----------------'                                                                                        '---------------'
//                         ,------+------+------+------.               ,-----+------+------+------.  
//                        |       |      |      |      |              |      |      |      |      | 
//                         `---------------------------'               `--------------------------'
//                               [ ] [ ] [ ] [ ] [ ]                       [ ] [ ] [ ] [ ] [ ]
// 
// -----------------------------------------------------------------------------------------------------------------------------
//---------------------------------------------------------------------------
// USB Scan code values.
//
// These constants are used with inbuilt functions:
//  * func pressScanCode(SC_xxx)
//  * func releaseScanCode(SC_xxx)
//  * func tapScanCode(SC_xxx)
//  * func isScanCodePressed(SC_xxx) var
//
//---------------------------------------------------------------------------

const SC_NONE = 0;

const SC_A = 0x04;
const SC_B = 0x05;
const SC_C = 0x06;
const SC_D = 0x07;
const SC_E = 0x08;
const SC_F = 0x09;
const SC_G = 0x0a;
const SC_H = 0x0b;
const SC_I = 0x0c;
const SC_J = 0x0d;
const SC_K = 0x0e;
const SC_L = 0x0f;
const SC_M = 0x10;
const SC_N = 0x11;
const SC_O = 0x12;
const SC_P = 0x13;
const SC_Q = 0x14;
const SC_R = 0x15;
const SC_S = 0x16;
const SC_T = 0x17;
const SC_U = 0x18;
const SC_V = 0x19;
const SC_W = 0x1a;
const SC_X = 0x1b;
const SC_Y = 0x1c;
const SC_Z = 0x1d;

const SC_1 = 0x1e;
const SC_2 = 0x1f;
const SC_3 = 0x20;
const SC_4 = 0x21;
const SC_5 = 0x22;
const SC_6 = 0x23;
const SC_7 = 0x24;
const SC_8 = 0x25;
const SC_9 = 0x26;
const SC_0 = 0x27;

const SC_ARNG = 0x2f;
const SC_ADIA = 0x2d;
const SC_ODIA = 0x30;


const SC_ENTER = 0x28;
const SC_ESC = 0x29;
const SC_BACKSPACE = 0x2a;
const SC_TAB = 0x2b;
const SC_SPACE = 0x2c;
const SC_MINUS = 0x2d;
const SC_EQUAL = 0x2e;
const SC_L_BRACKET = 0x2f;
const SC_R_BRACKET = 0x30;
const SC_BACKSLASH = 0x31;
const SC_HASH_TILDE = 0x32;
const SC_SEMICOLON = 0x33;
const SC_APOSTROPHE = 0x34;
const SC_GRAVE = 0x35;
const SC_COMMA = 0x36;
const SC_DOT = 0x37;
const SC_SLASH = 0x38;
const SC_CAPS = 0x39;

const SC_F1 = 0x3a;
const SC_F2 = 0x3b;
const SC_F3 = 0x3c;
const SC_F4 = 0x3d;
const SC_F5 = 0x3e;
const SC_F6 = 0x3f;
const SC_F7 = 0x40;
const SC_F8 = 0x41;
const SC_F9 = 0x42;
const SC_F10 = 0x43;
const SC_F11 = 0x44;
const SC_F12 = 0x45;

const SC_SYS_RQ = 0x46;
const SC_SCROLL_LOCK = 0x47;
const SC_PAUSE = 0x48;
const SC_INSERT = 0x49;
const SC_HOME = 0x4a;
const SC_PAGE_UP = 0x4b;
const SC_DELETE = 0x4c;
const SC_END = 0x4d;
const SC_PAGE_DOWN = 0x4e;
const SC_RIGHT = 0x4f;
const SC_LEFT = 0x50;
const SC_DOWN = 0x51;
const SC_UP = 0x52;

const SC_NUM_LOCK = 0x53;
const SC_KP_SLASH = 0x54;
const SC_KP_ASTERISK = 0x55;
const SC_KP_MINUS = 0x56;
const SC_KP_PLUS = 0x57;
const SC_KP_ENTER = 0x58;
const SC_KP_1 = 0x59;
const SC_KP_2 = 0x5a;
const SC_KP_3 = 0x5b;
const SC_KP_4 = 0x5c;
const SC_KP_5 = 0x5d;
const SC_KP_6 = 0x5e;
const SC_KP_7 = 0x5f;
const SC_KP_8 = 0x60;
const SC_KP_9 = 0x61;
const SC_KP_0 = 0x62;
const SC_KP_DOT = 0x63;

const SC_BACKSLASH_PIPE = 0x64;
const SC_COMPOSE = 0x65;
const SC_POWER = 0x66;
const SC_KP_EQUAL = 0x67;

const SC_F13 = 0x68;
const SC_F14 = 0x69;
const SC_F15 = 0x6a;
const SC_F16 = 0x6b;
const SC_F17 = 0x6c;
const SC_F18 = 0x6d;
const SC_F19 = 0x6e;
const SC_F20 = 0x6f;
const SC_F21 = 0x70;
const SC_F22 = 0x71;
const SC_F23 = 0x72;
const SC_F24 = 0x73;

const SC_OPEN = 0x74;
const SC_HELP = 0x75;
const SC_MENU = 0x76;
const SC_SELECT = 0x77;
const SC_STOP = 0x78;
const SC_AGAIN = 0x79;
const SC_UNDO = 0x7a;
const SC_CUT = 0x7b;
const SC_COPY = 0x7c;
const SC_PASTE = 0x7d;
const SC_FIND = 0x7e;
const SC_MUTE = 0x7f;
const SC_VOLUME_UP = 0x80;
const SC_VOLUME_DOWN = 0x81;

const SC_KP_COMMA = 0x85;

const SC_KP_LEFT_PAREN = 0xb6;
const SC_KP_RIGHT_PAREN = 0xb7;

const SC_L_CTRL = 0xe0;
const SC_L_SHIFT = 0xe1;
const SC_L_ALT = 0xe2;
const SC_L_META = 0xe3;
const SC_R_CTRL = 0xe4;
const SC_R_SHIFT = 0xe5;
const SC_R_ALT = 0xe6;
const SC_R_META = 0xe7;

const SC_MEDIA_PLAY_PAUSE = 0xe8;
const SC_MEDIA_STOP_CD = 0xe9;
const SC_MEDIA_PREVIOUS_SONG = 0xea;
const SC_MEDIA_NEXT_SONG = 0xeb;
const SC_MEDIA_EJECT_CD = 0xec;
const SC_MEDIA_VOLUME_UP = 0xed;
const SC_MEDIA_VOLUME_DOWN = 0xee;
const SC_MEDIA_MUTE = 0xef;
const SC_MEDIA_WWW = 0xf0;
const SC_MEDIA_BACK = 0xf1;
const SC_MEDIA_FORWARD = 0xf2;
const SC_MEDIA_STOP = 0xf3;
const SC_MEDIA_FIND = 0xf4;
const SC_MEDIA_SCROLL_UP = 0xf5;
const SC_MEDIA_SCROLL_DOWN = 0xf6;
const SC_MEDIA_EDIT = 0xf7;
const SC_MEDIA_SLEEP = 0xf8;
const SC_MEDIA_COFFEE = 0xf9;
const SC_MEDIA_REFRESH = 0xfa;
const SC_MEDIA_CALC = 0xfb;

//---------------------------------------------------------------------------
// javelin-steno steno key values.
//
// These constants are used with inbuilt functions:
//  * func pressStenoKey(SK_xxx)
//  * func releaseStenoKey(SK_xxx)
//  * func isStenoKeyPressed(SK_xxx) var
//
//---------------------------------------------------------------------------

const SK_NONE = -1;
const SK_S1 = 0;
const SK_S2 = 1;
const SK_TL = 2;
const SK_KL = 3;
const SK_PL = 4;
const SK_WL = 5;
const SK_HL = 6;
const SK_RL = 7;
const SK_A = 8;
const SK_O = 9;
const SK_STAR1 = 10;
const SK_STAR2 = 11;
const SK_STAR3 = 12;
const SK_STAR4 = 13;
const SK_E = 14;
const SK_U = 15;
const SK_FR = 16;
const SK_RR = 17;
const SK_PR = 18;
const SK_BR = 19;
const SK_LR = 20;
const SK_GR = 21;
const SK_TR = 22;
const SK_SR = 23;
const SK_DR = 24;
const SK_ZR = 25;
const SK_NUM1 = 26;
const SK_NUM2 = 27;
const SK_NUM3 = 28;
const SK_NUM4 = 29;
const SK_NUM5 = 30;
const SK_NUM6 = 31;
const SK_NUM7 = 32;
const SK_NUM8 = 33;
const SK_NUM9 = 34;
const SK_NUM10 = 35;
const SK_NUM11 = 36;
const SK_NUM12 = 37;
const SK_FUNCTION = 38;
const SK_POWER = 39;
const SK_RES1 = 40;
const SK_RES2 = 41;

//---------------------------------------------------------------------------
// Other functions:
//
//  * func releaseAll()
//    - releases all pressed scan codes and steno keys.
//  * func pressAll()
//    - call all press scripts for buttons that are pressed.
//  * func isInPressAll() var
//    - returns non-zero if a pressAll is being processed.
//  * func isButtonPressed(buttonIndex) var
//    - Returns 1 if the physical button is pressed.
//  * func checkButtonState("01 10") var
//    - Returns if the current button state matches the string.
//    - 0 = not pressed, space = ignore, all others = pressed.
//      - The example string checks that:
//        - button 0 is off.
//        - button 1 is on.
//        - button 3 is on.
//        - button 4 is off.
//    - The string should be the same length as the number of buttons.
//  * func sendText("Example")
//    - Sends all of the key presses required to emit the specified string.
//    - e.g.,
//      - Press Shift
//      - Press E
//      - Release E
//      - Release Shift
//      - Press X
//      - Release X
//      - etc.
//  * func getTime() var
//    - Returns milliseconds since launch.
//
// releaseAll() and pressAll() are useful for changing modes/layers, e.g.:
//
// if (layer != SYMBOL_LAYER) {
//   releaseAll();
//   layer = SYMBOL_LAYER;
//   pressAll();
// }
//
// This will allow keys on the symbol layer to be pressed 'out-of-order' but
// still behave as expected.
//
// It is important that every pressAll() call in an onPress handler is guarded
// to prevent infinite recursion, since the onPress will be re-run even for the
// current key. The easiest way to do this is using isInPressAll() function.
//
//---------------------------------------------------------------------------
// Example global variable:
//   var layers = 0;
//
// Example local functions:
//
//   func useNavLayer() var {
//     return isButtonPressed(22);
//   }
//
//   func handlePress(stenoKey, navKey) {
//     if (useNavLayer()) {
//       pressScanCode(navKey);
//     } else {
//       pressStenoKey(stenoKey);
//     }
//   }
//
// Then the onPress handler could call handlePress(SK_S1, SC_TAB);
//---------------------------------------------------------------------------
// The script needs to have onPress## and onRelease## functions for every
// physical button.
//---------------------------------------------------------------------------

const QWERTY_LAYER = 0;
const STENO_MASK = 1;
const SYMBOL_MASK = 2;
const FUNCTION_MASK = 4;
const NAV_MASK = 8;
const SETTINGS_MASK = 16;

var layer = STENO_MASK;
var pressCount = 0;
var deferredQwertyKey = 0;
var deferredLayerKey = 0;
var functionLayerPressTimestamp;
var otherPressCount = 0;
var lastActionTime = 0;
var lastCapsLockStatus = 0;

const MACRO_BACKTICK = 0x400;

const SYM_SHIFT = 0x100;
const SYM_ALTGR = 0x200;
const STENO_TO_SC = 0x300;
const TAP_THRESHOLD = 200; // milliseconds for keys that have alternates.

func setLayer(value) {
  layer = value;
}

func isSettingsLayer() var {
  return (layer & (SYMBOL_MASK | NAV_MASK)) == (SYMBOL_MASK | NAV_MASK);
}

func handlePress(qwertyKey, stenoKey, symbolsKey, functionKey, navKey) {
  lastActionTime = getTime();
  otherPressCount = otherPressCount + 1;
  if (isSettingsLayer()) {
    return;
  } else if (layer & SETTINGS_MASK) {
    // Do nothing!
  } else if (layer & NAV_MASK) {
    pressScanCode(navKey);
  } else if (layer & FUNCTION_MASK) {
    pressScanCode(functionKey);
  } else if (layer & SYMBOL_MASK) {
    if (symbolsKey & SYM_SHIFT) {
      pressScanCode(SC_L_SHIFT);
    } else if (symbolsKey & SYM_ALTGR) {
      pressScanCode(SC_R_ALT);
    }
    pressScanCode(symbolsKey & 0xff);
  } else if (layer & STENO_MASK) {
    if (stenoKey & STENO_TO_SC) {
      pressScanCode(qwertyKey);
    } else if (stenoKey) {
      pressStenoKey(stenoKey);
    }
  } else {
    pressScanCode(qwertyKey);
  }
}

func handleRelease(qwertyKey, stenoKey, symbolsKey, functionKey, navKey) {
  lastActionTime = getTime();
  if (layer & SETTINGS_MASK) {
    // Do nothing!
  } else if (layer & NAV_MASK) {
    releaseScanCode(navKey);
  } else if (layer & FUNCTION_MASK) {
    releaseScanCode(functionKey);
  } else if (layer & SYMBOL_MASK) {
    releaseScanCode(symbolsKey & 0xff);
    if (symbolsKey & SYM_SHIFT) {
      releaseScanCode(SC_L_SHIFT);
    } else if (symbolsKey & SYM_ALTGR) {
      releaseScanCode(SC_R_ALT);
    }
  } else if (layer & STENO_MASK) {
    if (stenoKey & STENO_TO_SC) {
      releaseScanCode(qwertyKey);
    } else if (stenoKey) {
      releaseStenoKey(stenoKey);
    }
  } else {
    releaseScanCode(qwertyKey);
  }
}

func onPress0() { handlePress(SC_NONE, SK_NONE, SC_GRAVE, SC_NONE, SC_NONE); 
    if (layer & STENO_MASK) {
      sendText(console("get_parameter stroke_count"));
    } else if (layer == 0) {
      tapScanCode(SC_TAB);
    }
}
func onRelease0() { handleRelease(SC_NONE, SK_NONE, SC_GRAVE, SC_NONE, SC_NONE); }

func onPress1() { handlePress(SC_Q, SK_NUM1, SC_1, SC_F9, SC_NONE); }
func onRelease1() { handleRelease(SC_Q, SK_NUM1, SC_1, SC_F9, SC_NONE); }

func onPress2() { handlePress(SC_W, SK_NUM2, SC_2, SC_NONE, SC_F1); }
func onRelease2() { handleRelease(SC_W, SK_NUM2, SC_2, SC_NONE, SC_F1); }

func onPress3() { handlePress(SC_E, SK_NUM3, SC_3, SC_NONE, SC_F2);
  if (layer & SETTINGS_MASK) {
    console("set_steno_mode embedded");
  }
}
func onRelease3() { handleRelease(SC_E, SK_NUM3, SC_3, SC_NONE, SC_F2); }

func onPress4() { handlePress(SC_R, SK_NUM4, SC_4, SC_NONE, SC_F3); }
func onRelease4() { handleRelease(SC_R, SK_NUM4, SC_4, SC_NONE, SC_F3); }

func onPress5() { handlePress(SC_T, SK_NUM5, SC_5, SC_NONE, SC_F4); }
func onRelease5() { handleRelease(SC_T, SK_NUM5, SC_5, SC_NONE, SC_F4); }

func onPress6() { handlePress(SC_Y, SK_NUM6, SC_6, SC_NONE, SC_VOLUME_UP); }
func onRelease6() { handleRelease(SC_Y, SK_NUM6, SC_6, SC_NONE, SC_VOLUME_UP); }

func onPress7() { handlePress(SC_U, SK_NUM7, SC_7, SC_NONE, SC_BACKSPACE); }
func onRelease7() { handleRelease(SC_U, SK_NUM7, SC_7, SC_NONE, SC_BACKSPACE); }

func onPress8() { handlePress(SC_I, SK_NUM8, SC_8, SC_NONE, SC_INSERT); }
func onRelease8() { handleRelease(SC_I, SK_NUM8, SC_8, SC_NONE, SC_INSERT); }

func onPress9() { handlePress(SC_O, SK_NUM9, SC_9, SC_NONE, SC_DELETE); }
func onRelease9() { handleRelease(SC_O, SK_NUM9, SC_9, SC_NONE, SC_DELETE); }

func onPress10() { handlePress(SC_P, SK_SR, SC_0, SC_NONE, SC_PAGE_UP); }
func onRelease10() { handleRelease(SC_P, SK_SR, SC_0, SC_NONE, SC_PAGE_UP); }

func onPress11() { handlePress(SC_ARNG, SK_ZR, SC_HASH_TILDE, SC_NONE, SC_EQUAL); }
func onRelease11() { handleRelease(SC_ARNG, SK_ZR, SC_HASH_TILDE, SC_NONE, SC_EQUAL); }

var timer12;
func onPress12() {
  handlePress(SC_L_SHIFT, SC_ESC | STENO_TO_SC, SC_L_SHIFT, SC_L_SHIFT, SC_L_SHIFT);
  timer12 = getTime();
  otherPressCount = 0;
}
func onRelease12() {
  handleRelease(SC_L_SHIFT, SC_ESC | STENO_TO_SC, SC_L_SHIFT, SC_L_SHIFT, SC_L_SHIFT);
  if ((otherPressCount) == 0 && getTime() - timer12 < TAP_THRESHOLD) {
    otherPressCount = otherPressCount + 1;
    tapScanCode(SC_ESC);
  }
}

func onPress13() { handlePress(SC_A, SK_S1, SC_1 | SYM_SHIFT, SC_F5, SC_L_META); }
func onRelease13() { handleRelease(SC_A, SK_S1, SC_1 | SYM_SHIFT, SC_F5, SC_L_META); }

func onPress14() { handlePress(SC_S, SK_TL, SC_2 | SYM_SHIFT, SC_NONE, SC_F5); }
func onRelease14() { handleRelease(SC_S, SK_TL, SC_2 | SYM_SHIFT, SC_NONE, SC_F5); }

func onPress15() {
  handlePress(SC_D, SK_PL, SC_3 | SYM_SHIFT, SC_NONE, SC_F6);
  if (layer & SETTINGS_MASK) {
    console("set_steno_mode gemini");
  }
}
func onRelease15() { handleRelease(SC_D, SK_PL, SC_3 | SYM_SHIFT, SC_NONE, SC_F6); }

func onPress16() { handlePress(SC_F, SK_HL, SC_0 | SYM_SHIFT, SC_NONE, SC_F7); }
func onRelease16() { handleRelease(SC_F, SK_HL, SC_0 | SYM_SHIFT, SC_NONE, SC_F7); }

func onPress17() { handlePress(SC_G, SK_STAR1, SC_5 | SYM_SHIFT, SC_NONE, SC_F8); }
func onRelease17() { handleRelease(SC_G, SK_STAR1, SC_5 | SYM_SHIFT, SC_NONE, SC_F8); }

func onPress18() { handlePress(SC_H, SK_STAR2, SC_6 | SYM_SHIFT, SC_NONE, SC_VOLUME_DOWN); }
func onRelease18() { handleRelease(SC_H, SK_STAR2, SC_6 | SYM_SHIFT, SC_NONE, SC_VOLUME_DOWN); }

func onPress19() { handlePress(SC_J, SK_FR, SC_7 | SYM_SHIFT, SC_L_SHIFT, SC_HOME); }
func onRelease19() { handleRelease(SC_J, SK_FR, SC_7 | SYM_SHIFT, SC_L_SHIFT, SC_HOME); }

func onPress20() { handlePress(SC_K, SK_PR, SC_8 | SYM_SHIFT, SC_L_CTRL, SC_UP); }
func onRelease20() { handleRelease(SC_K, SK_PR, SC_8 | SYM_SHIFT, SC_L_CTRL, SC_UP); }

func onPress21() { handlePress(SC_L, SK_LR, SC_9 | SYM_SHIFT, SC_L_ALT, SC_END); }
func onRelease21() { handleRelease(SC_L, SK_LR, SC_9 | SYM_SHIFT, SC_L_ALT, SC_END); }

func onPress22() { handlePress(SC_SEMICOLON, SK_TR, SC_HASH_TILDE, SC_L_META, SC_NONE); 
if (layer == 8){
    pressScanCode(SC_L_CTRL);
    tapScanCode(SC_BACKSPACE);
    releaseScanCode(SC_L_CTRL);
}}
func onRelease22() { handleRelease(SC_SEMICOLON, SK_TR, SC_HASH_TILDE, SC_L_META, SC_NONE); }

func onPress23() { handlePress(SC_APOSTROPHE, SK_DR, SC_BACKSLASH_PIPE | SYM_ALTGR, SC_NONE, SC_NONE); 
if (layer == 8){
    pressScanCode(SC_L_CTRL);
    tapScanCode(SC_DELETE);
    releaseScanCode(SC_L_CTRL);
}}
func onRelease23() { handleRelease(SC_APOSTROPHE, SK_DR, SC_BACKSLASH_PIPE | SYM_ALTGR, SC_NONE, SC_NONE); }

func onPress24() { handlePress(SC_L_CTRL, SK_NONE, SK_NONE, SC_NONE, SC_L_CTRL); 
if (layer == 1){ // Sends stroke 'STPH' to suppress first space
    pressStenoKey(SK_S2);
    pressStenoKey(SK_TL);
    pressStenoKey(SK_PL);
    pressStenoKey(SK_HL);
    releaseStenoKey(SK_S2);
    releaseStenoKey(SK_TL);
    releaseStenoKey(SK_PL);
    releaseStenoKey(SK_HL);
    releaseAll();
} else if (layer == 2){ // Send '^' symbol
    pressScanCode(SC_L_SHIFT);
    tapScanCode(SC_ODIA);
    tapScanCode(SC_ODIA);
    tapScanCode(SC_BACKSPACE);
    releaseScanCode(SC_L_SHIFT);
}}
func onRelease24() { handleRelease(SC_L_CTRL, SK_NONE, SK_NONE, SC_NONE, SC_L_CTRL); }

func onPress25() { handlePress(SC_Z, SK_S2, SC_ODIA | SYM_ALTGR, SC_F1, SC_NONE); 
if (layer == 2){
    pressScanCode(SC_R_ALT);
    tapScanCode(SC_ODIA);
    tapScanCode(SC_SPACE);
    tapScanCode(SC_ODIA); // can't get it to only output one
    releaseScanCode(SC_R_ALT);
    tapScanCode(SC_BACKSPACE); // so need to remove second
}}
func onRelease25() { handleRelease(SC_Z, SK_S2, SC_ODIA | SYM_ALTGR, SC_F1, SC_NONE); }

func onPress26() { handlePress(SC_X, SK_KL, SC_2 | SYM_ALTGR, SC_NONE, SC_F9); }
func onRelease26() { handleRelease(SC_X, SK_KL, SC_2 | SYM_ALTGR, SC_NONE, SC_F9); }

func onPress27() { handlePress(SC_C, SK_WL, SC_MINUS, SC_NONE, SC_F10);
  if (layer & SETTINGS_MASK) {
    console("set_steno_mode plover_hid");
  }
}
func onRelease27() { handleRelease(SC_C, SK_WL, SC_MINUS, SC_NONE, SC_F10); }

func onPress28() { handlePress(SC_V, SK_RL, SC_7 | SYM_ALTGR, SC_NONE, SC_F11); }
func onRelease28() { handleRelease(SC_V, SK_RL, SC_7 | SYM_ALTGR, SC_NONE, SC_F11); }

func onPress29() { handlePress(SC_B, SK_STAR3, SC_0 | SYM_ALTGR, SC_NONE, SC_F12); }
func onRelease29() { handleRelease(SC_B, SK_STAR3, SC_0 | SYM_ALTGR, SC_NONE, SC_F12); }

func onPress30() { handlePress(SC_N, SK_STAR4, SC_8 | SYM_ALTGR, SC_NONE, SC_MUTE); }
func onRelease30() { handleRelease(SC_N, SK_STAR4, SC_8 | SYM_ALTGR, SC_NONE, SC_MUTE); }

func onPress31() { handlePress(SC_M, SK_RR, SC_9 | SYM_ALTGR, SC_NONE, SC_LEFT); }
func onRelease31() { handleRelease(SC_M, SK_RR, SC_9 | SYM_ALTGR, SC_NONE, SC_LEFT); }

func onPress32() { handlePress(SC_COMMA, SK_BR, SC_BACKSLASH_PIPE, SC_NONE, SC_DOWN); }
func onRelease32() { handleRelease(SC_COMMA, SK_BR, SC_BACKSLASH_PIPE, SC_NONE, SC_DOWN); }

func onPress33() { handlePress(SC_DOT, SK_GR, SC_BACKSLASH_PIPE | SYM_SHIFT, SC_NONE, SC_RIGHT); }
func onRelease33() { handleRelease(SC_DOT, SK_GR, SC_BACKSLASH_PIPE | SYM_SHIFT, SC_NONE, SC_RIGHT); }

func onPress34() { handlePress(SC_SLASH, SK_SR, SC_MINUS | SYM_ALTGR, SC_NONE, SC_PAGE_DOWN); }
func onRelease34() { handleRelease(SC_SLASH, SK_SR, SC_MINUS | SYM_ALTGR, SC_NONE, SC_PAGE_DOWN); }

func onPress35() { handlePress(SC_R_SHIFT, SK_ZR, SC_HASH_TILDE | SYM_SHIFT, SC_NONE, SC_NONE); 
if (layer == 8){
    pressScanCode(SC_L_SHIFT);
    tapScanCode(SC_EQUAL);
    //tapScanCode(SC_SPACE);
    tapScanCode(SC_EQUAL); // needed for consistent output without extra spaces
    tapScanCode(SC_BACKSPACE);
    releaseScanCode(SC_L_SHIFT); // needed for consistent output without extra spaces
}}
func onRelease35() { handleRelease(SC_R_SHIFT, SK_ZR, SC_HASH_TILDE | SYM_SHIFT, SC_NONE, SC_NONE); }

var wasStenoLayer36;
var timer36;
func onPress36() {
  if (layer == 8){
    pressScanCode(SC_R_META);
    tapScanCode(SC_SPACE);
    releaseScanCode(SC_R_META);
  }
  if (isInPressAll()) return;

  lastActionTime = getTime();
  wasStenoLayer36 = 0;
  timer36 = getTime();

  if (layer >> 1) return;

  wasStenoLayer36 = layer & STENO_MASK;
  otherPressCount = 0;
  if (wasStenoLayer36) {
    releaseAll();
    setLayer(layer ^ STENO_MASK);
    pressAll();
  }
}
func onRelease36() {
  lastActionTime = getTime();

  if ((otherPressCount | (layer >> 1)) == 0 && getTime() - timer36 < TAP_THRESHOLD) {
    // Do the toggle.
    if (!wasStenoLayer36) {
      releaseAll();
      setLayer(layer ^ STENO_MASK);
      pressAll();
    }
  } else {
    // Return to the original
    if (wasStenoLayer36) {
      releaseAll();
      setLayer(layer ^ STENO_MASK);
      pressAll();
    }
  }
}

func onPress37() { handlePress(SC_L_ALT, SK_NUM1, SC_L_ALT, SC_NONE, SC_L_ALT); }
func onRelease37() { handleRelease(SC_L_ALT, SK_NUM1, SC_L_ALT, SC_NONE, SC_L_ALT); }

func onPress38() { handlePress(SC_SPACE, SK_A, SC_SLASH, SC_NONE, SC_BACKSPACE); }
func onRelease38() { handleRelease(SC_SPACE, SK_A, SC_SLASH, SC_NONE, SC_BACKSPACE); }

var pressCount39;
func onPress39() {
  handlePress(SC_NONE, SK_O, SC_NONE, SC_NONE, SC_NONE);
  if (!isInPressAll() && (layer | NAV_MASK) == NAV_MASK) {
    pressCount = pressCount + 1;
    releaseAll();
    setLayer(layer | SYMBOL_MASK);
    pressAll();
    functionLayerPressTimestamp = getTime();
    pressCount39 = pressCount;
  }
}
func onRelease39() {
  handleRelease(SC_NONE, SK_O, SC_NONE, SC_NONE, SC_NONE);
  if (layer & SYMBOL_MASK) {
    var startPressCount = pressCount;

    releaseAll();
    setLayer(layer ^ SYMBOL_MASK);
    pressAll();

    if (layer == 0) {
      if (pressCount39 == startPressCount && getTime() - functionLayerPressTimestamp < TAP_THRESHOLD) {
        tapScanCode(SC_ENTER);
      }

      tapScanCode(deferredQwertyKey);
    }
    deferredLayerKey = 0;
    deferredQwertyKey = 0;
  }
}

func onPress40() {
  if ((layer | SYMBOL_MASK) != SYMBOL_MASK) {
    handlePress(SC_NONE, SK_E, SC_NONE, SC_NONE, SC_NONE);
  } else {
    pressCount = pressCount + 1;
    releaseAll();
    setLayer(layer | NAV_MASK);
    pressAll();
  }
}
func onRelease40() {
  if (layer & NAV_MASK) {
    releaseAll();
    setLayer(layer ^ NAV_MASK);
    pressAll();
  } else {
    handleRelease(SC_NONE, SK_E, SC_NONE, SC_NONE, SC_NONE);
  }
}

func onPress41() { handlePress(SC_ENTER, SK_U, SC_NONE | SC_NONE, SC_NONE, SC_NONE); }
func onRelease41() { handleRelease(SC_ENTER, SK_U, SC_NONE | SC_NONE, SC_NONE, SC_NONE); }

func onPress42() { handlePress(SC_R_ALT, SK_NUM1, SC_R_ALT, SC_NONE, SC_R_ALT); }
func onRelease42() { handleRelease(SC_R_ALT, SK_NUM1, SC_R_ALT, SC_NONE, SC_R_ALT); }

func onPress43() { handlePress(SC_L_META, SK_S1, SC_L_CTRL, SC_NONE, SC_R_META); }
func onRelease43() { handleRelease(SC_L_META, SK_S1, SC_L_CTRL, SC_NONE, SC_R_META); }

func onPress44() {
  lastActionTime = getTime();
  if (layer >> 1) return;

  releaseAll();
  setLayer(layer | NAV_MASK);
  pressAll();
}
func onRelease44() {
  lastActionTime = getTime();
  if (layer & NAV_MASK) {
    releaseAll();
    setLayer(layer ^ NAV_MASK);
  }
}

func onPress45() {
  lastActionTime = getTime();
  if (layer >> 1) return;

  releaseAll();
  setLayer(layer | SYMBOL_MASK);
  pressAll();
}
func onRelease45() {
  lastActionTime = getTime();
  if (layer & SYMBOL_MASK) {
    releaseAll();
    setLayer(layer ^ SYMBOL_MASK);
  }
}

func onPress46() { handlePress(SC_SPACE, SK_E, SC_NONE, SC_NONE, SC_SPACE); }
func onRelease46() { handleRelease(SC_SPACE, SK_E, SC_NONE, SC_NONE, SC_SPACE); }

var timer47;
func onPress47() {
  handlePress(SC_R_ALT, SK_U, SC_NONE, SC_NONE, SC_ENTER);
  timer47 = getTime();
  otherPressCount = 0;
}
func onRelease47() {
  handleRelease(SC_R_ALT, SK_U, SC_NONE, SC_NONE, SC_ENTER);
  if ((layer | otherPressCount) == 0 && getTime() - timer47 < TAP_THRESHOLD) {
    otherPressCount = otherPressCount + 1;
    tapScanCode(SC_ENTER);
  }
}

func onPress48() { handlePress(SC_R_META, SK_NUM2, SC_NONE, SC_NONE, SC_NONE); }
func onRelease48() { handleRelease(SC_R_META, SK_NUM2, SC_NONE, SC_NONE, SC_NONE); }

func onPress49() {
  lastActionTime = getTime();
  if (layer >> 1) return;

  releaseAll();
  setLayer(layer | SETTINGS_MASK);
  pressAll();
}
func onRelease49() {
  lastActionTime = getTime();
  if (layer & SETTINGS_MASK) {
    releaseAll();
    setLayer(layer ^ SETTINGS_MASK);
  }
}

func onPress50() { handlePress(SC_NONE, SK_NONE, SC_NONE | SC_NONE, SC_NONE, SC_NONE); }
func onRelease50() { handleRelease(SC_NONE, SK_NONE, SC_NONE | SC_NONE, SC_NONE, SC_NONE); }

func onPress51() { handlePress(SC_NONE, SK_NONE, SC_NONE | SC_NONE, SC_NONE, SC_NONE); }
func onRelease51() { handleRelease(SC_NONE, SK_NONE, SC_NONE | SC_NONE, SC_NONE, SC_NONE); }

func onPress52() { handlePress(SC_NONE, SK_NONE, SC_NONE | SC_NONE, SC_NONE, SC_NONE); }
func onRelease52() { handleRelease(SC_NONE, SK_NONE, SC_NONE | SC_NONE, SC_NONE, SC_NONE); }

func onPress53() { handlePress(SC_NONE, SK_NONE, SC_NONE | SC_NONE, SC_NONE, SC_NONE); }
func onRelease53() { handleRelease(SC_NONE, SK_NONE, SC_NONE | SC_NONE, SC_NONE, SC_NONE); }

func onPress54() { handlePress(SC_NONE, SK_NONE, SC_NONE | SC_NONE, SC_NONE, SC_NONE); }
func onRelease54() { handleRelease(SC_NONE, SK_NONE, SC_NONE | SC_NONE, SC_NONE, SC_NONE); }